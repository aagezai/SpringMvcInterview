package com.facebooked.demofacebooked.JWTCreationAndValidateJWT;

import org.json.JSONObject;

public class RetrieveJwt {

    public static void main(String[] args) {
        // Replace this with the actual JWT generated by the CreateJwtExample class
        String jwt ="eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwiYXVkIjoieW91cl9hdWRpZW5jZSIsIm5iZiI6MTcwMjUwMTk0MDYzMiwicm9sZXMiOlsiYWRtaW4iLCJ1c2VyIl0sImlzcyI6InlvdXJfaXNzdWVyIiwibmFtZSI6IkpvaG4gRG9lIiwiZXhwIjoxNzAyNTA1NjAwNjMyLCJpYXQiOjE3MDI1MDIwMDA2MzIsImp0aSI6InlvdXJfand0X2lkIn0.adpQqJK-qnX7D92-wLbwWKBsCcvRy6dT0R97c4md6XM";
        // Create an instance of the class
        RetrieveJwt retrieveJwtExample = new RetrieveJwt();

        // Step 1: Retrieve Payload, Header, and Signature
        JSONObject payload = retrieveJwtExample.retrievePayload(jwt);
        JSONObject header = retrieveJwtExample.retrieveHeader(jwt);
        String signature = retrieveJwtExample.retrieveSignature(jwt);

        System.out.println("Retrieved Payload: " + payload.toString());
        System.out.println("Retrieved Header: " + header.toString());
        System.out.println("Retrieved Signature: " + signature);
    }

    // Non-static method to retrieve payload from JWT
    public JSONObject retrievePayload(String jwt) {
        String[] parts = jwt.split("\\.");
        String payload = new String(java.util.Base64.getUrlDecoder().decode(parts[1]));

        return new JSONObject(payload);
    }

    // Non-static method to retrieve header from JWT
    public JSONObject retrieveHeader(String jwt) {
        String[] parts = jwt.split("\\.");
        String header = new String(java.util.Base64.getUrlDecoder().decode(parts[0]));

        return new JSONObject(header);
    }

    // Non-static method to retrieve signature from JWT
    public String retrieveSignature(String jwt) {
        String[] parts = jwt.split("\\.");
        return parts[2];
    }
}
